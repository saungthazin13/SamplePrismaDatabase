// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ROLE {
    USER
    ADMIN
    AUTHOR
}

enum STATUS {
    ACTIVE
    INACTIVE
    FREEZE
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String?   @db.VarChar(52)
    posts    Post[]
    products Product[]
}

model Type {
    id       Int       @id @default(autoincrement())
    name     String?   @db.VarChar(52)
    posts    Post[]
    products Product[]
}

model Post {
    id       Int     @id @default(autoincrement())
    title    String  @db.VarChar(255)
    content  String?
    body     String
    image    String
    //for both relation query
    authorId Int
    author   User    @relation(fields: [authorId], references: [id])
    //for both relation query

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    typeId Int
    type   Type @relation(fields: [typeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id              Int       @id @default(autoincrement())
    firstName       String?   @db.VarChar(52)
    lastName        String?   @db.VarChar(52)
    phone           String    @db.VarChar(15)
    password        String
    email           String?   @unique @db.VarChar(52)
    role            ROLE      @default(USER)
    status          STATUS    @default(ACTIVE)
    lastLogin       DateTime?
    errorLoginCount Int       @default(0) @db.SmallInt
    randToken       String
    image           String?
    createdAt       DateTime  @default(now())
    updatedAT       DateTime  @updatedAt
    //  @@map("users")  
    posts           Post[]
    orders          Order[]
}

model Tag {
    id       Int        @id @default(autoincrement())
    name     String?    @db.VarChar(52)
    taggable Taggable[]
}

model Taggable {
    id     Int    @id @default(autoincrement())
    tagId  Int
    tag    Tag    @relation(fields: [tagId], references: [id])
    type   String @db.VarChar(7) //posts ,products
    typeId Int
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String?  @db.VarChar(52)
    description String
    price       Decimal  @db.Decimal(10, 2)
    discount    Decimal  @default(0) @db.Decimal(10, 2)
    rating      Int      @default(0) @db.SmallInt
    inventory   Int      @default(0)
    status      STATUS   @default(ACTIVE)
    createdAt   DateTime @default(now())
    updatedAT   DateTime @updatedAt
    Image       Image[]
    categoryId  Int
    category    Category @relation(fields: [categoryId], references: [id])
    typeId      Int
    type        Type     @relation(fields: [typeId], references: [id])

    products ProductsOnOrders[]
}

model Image {
    id        Int     @id @default(autoincrement())
    path      String? @db.VarChar(52)
    productId Int
    product   Product @relation(fields: [productId], references: [id])
}

model Order {
    id         Int      @id @default(autoincrement())
    userId     Int
    user       User     @relation(fields: [userId], references: [id])
    code       String   @db.VarChar(15)
    totalPrice Decimal  @db.Decimal(10, 2)
    createdAt  DateTime @default(now())
    updatedAT  DateTime @updatedAt

    products ProductsOnOrders[]
}

model ProductsOnOrders {
    id        Int     @id @default(autoincrement())
    productId Int
    product   Product @relation(fields: [productId], references: [id])

    orderId  Int
    order    Order   @relation(fields: [orderId], references: [id])
    price    Decimal @db.Decimal(10, 2)
    quantity Int     @db.SmallInt
}

model Otp {
    id            Int      @id @default(autoincrement())
    phone         String   @db.VarChar(11)
    otp           String   @db.VarChar(6)
    remembertoken String
    verifytoken   String?
    count         Int      @default(0) @db.SmallInt
    errors        Int      @default(0) @db.SmallInt
    createdAt     DateTime @default(now())
    updatedAT     DateTime @updatedAt
}
